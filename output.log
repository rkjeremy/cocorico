[0m[1mdata.archive_file.lambda: Reading...[0m[0m
[0m[1mdata.archive_file.lambda: Read complete after 0s [id=a867f43b071aa49adeb2037fe9350783ca65ae1b][0m
[0m[1mdata.aws_iam_policy_document.lambda_assume_role: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.cloudtrail_assume_role: Reading...[0m[0m
[0m[1mdata.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_partition.current: Reading...[0m[0m
[0m[1mdata.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mdata.aws_iam_policy_document.lambda_assume_role: Read complete after 0s [id=2690255455][0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_region.current: Read complete after 0s [id=af-south-1][0m
[0m[1mdata.aws_iam_policy_document.lambda_logging: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.cloudtrail_assume_role: Read complete after 0s [id=1399789601][0m
[0m[1mdata.aws_iam_policy_document.lambda_logging: Read complete after 0s [id=16712114][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=730335421882][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_iam_policy_document.CloudTrail_CloudWatchLogs_Role_Policy[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "CloudTrail_CloudWatchLogs_Role_Policy" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "logs:CreateLogStream",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:logs:af-south-1:730335421882:log-group:cocorico_cwlg:log-stream:730335421882_CloudTrail_af-south-1*",
            ]
          [32m+[0m[0m sid       = "AWSCloudTrailCreateLogStream2014110"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "logs:PutLogEvents",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:logs:af-south-1:730335421882:log-group:cocorico_cwlg:log-stream:730335421882_CloudTrail_af-south-1*",
            ]
          [32m+[0m[0m sid       = "AWSCloudTrailPutLogEvents20141101"
        }
    }

[1m  # data.aws_iam_policy_document.cocorico_iam_policy_document[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "cocorico_iam_policy_document" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:GetBucketAcl",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "AWSCloudTrailAclCheck"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "arn:aws:cloudtrail:af-south-1:730335421882:trail/cocorico_trail",
                ]
              [32m+[0m[0m variable = "aws:SourceArn"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "cloudtrail.amazonaws.com",
                ]
              [32m+[0m[0m type        = "Service"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:PutObject",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "AWSCloudTrailWrite"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "arn:aws:cloudtrail:af-south-1:730335421882:trail/cocorico_trail",
                ]
              [32m+[0m[0m variable = "aws:SourceArn"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "bucket-owner-full-control",
                ]
              [32m+[0m[0m variable = "s3:x-amz-acl"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "cloudtrail.amazonaws.com",
                ]
              [32m+[0m[0m type        = "Service"
            }
        }
    }

[1m  # aws_cloudtrail.cocorico_trail[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudtrail" "cocorico_trail" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m cloud_watch_logs_group_arn    = (known after apply)
      [32m+[0m[0m cloud_watch_logs_role_arn     = (known after apply)
      [32m+[0m[0m enable_log_file_validation    = false
      [32m+[0m[0m enable_logging                = true
      [32m+[0m[0m home_region                   = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m include_global_service_events = true
      [32m+[0m[0m is_multi_region_trail         = true
      [32m+[0m[0m is_organization_trail         = false
      [32m+[0m[0m name                          = "cocorico_trail"
      [32m+[0m[0m s3_bucket_name                = (known after apply)
      [32m+[0m[0m sns_topic_arn                 = (known after apply)
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Feature"     = "Cocorico"
        }

      [32m+[0m[0m event_selector {
          [32m+[0m[0m exclude_management_event_sources = [
              [32m+[0m[0m "rdsdata.amazonaws.com",
            ]
          [32m+[0m[0m include_management_events        = true
          [32m+[0m[0m read_write_type                  = "WriteOnly"
        }
    }

[1m  # aws_cloudwatch_log_group.cocorico_cwlg[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "cocorico_cwlg" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "cocorico_cwlg"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 3
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Feature"     = "Cocorico"
        }
    }

[1m  # aws_cloudwatch_log_group.lambda_invocation_records[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda_invocation_records" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/cocorico_function"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 1
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Feature"     = "Cocorico"
        }
    }

[1m  # aws_cloudwatch_log_subscription_filter.logging[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_subscription_filter" "logging" {
      [32m+[0m[0m destination_arn = (known after apply)
      [32m+[0m[0m distribution    = "ByLogStream"
      [32m+[0m[0m filter_pattern  = "{$.eventName = \"RunInstances\" || $.eventName = \"TerminateInstances\"}"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m log_group_name  = "cocorico_cwlg"
      [32m+[0m[0m name            = "cocorico_logging"
      [32m+[0m[0m role_arn        = (known after apply)
    }

[1m  # aws_iam_policy.cloudtrail-policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cloudtrail-policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "This policy grants CloudTrail the permissions required to create a CloudWatch Logs log stream in the log group cocorico_cwlg and to deliver CloudTrail events to that log stream."
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "cocorico-cloudtrail-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Feature"     = "Cocorico"
        }
    }

[1m  # aws_iam_policy.lambda_logging[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "lambda_logging" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "IAM policy for logging from a lambda"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "lambda_logging"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/cocorico/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:logs:*:*:*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Feature"     = "Cocorico"
        }
    }

[1m  # aws_iam_role.CloudTrail_CloudWatchLogs_Role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "CloudTrail_CloudWatchLogs_Role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "cloudtrail.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "CloudTrail_CloudWatchLogs_Role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Feature"     = "Cocorico"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.iam_for_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "iam_for_lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "iam_for_lambda"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Feature"     = "Cocorico"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.lambda_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda_logs" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "iam_for_lambda"
    }

[1m  # aws_iam_role_policy_attachment.test-attach[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "test-attach" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "CloudTrail_CloudWatchLogs_Role"
    }

[1m  # aws_lambda_function.logging[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "logging" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m description                    = "This function triggers SNS topic"
      [32m+[0m[0m filename                       = "lambda_function_payload.zip"
      [32m+[0m[0m function_name                  = "cocorico_function"
      [32m+[0m[0m handler                        = "lambda.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "nodejs22.x"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Feature"     = "Cocorico"
        }
      [32m+[0m[0m timeout                        = 3
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config {
          [32m+[0m[0m log_format = "JSON"
          [32m+[0m[0m log_group  = (known after apply)
        }

      [32m+[0m[0m tracing_config (known after apply)
    }

[1m  # aws_lambda_permission.logging[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "logging" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "cocorico_function"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "logs.af-south-1.amazonaws.com"
      [32m+[0m[0m source_arn          = (known after apply)
      [32m+[0m[0m statement_id        = (known after apply)
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # aws_s3_bucket.cocorico_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "cocorico_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = "cocorico-trails-"
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = true
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Feature"     = "Cocorico"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # aws_s3_bucket_policy.cocorico_bucket_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "cocorico_bucket_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1mPlan:[0m 14 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cocorico_trail_id = (known after apply)
[0m[1maws_iam_role.CloudTrail_CloudWatchLogs_Role: Creating...[0m[0m
[0m[1maws_cloudwatch_log_group.cocorico_cwlg: Creating...[0m[0m
[0m[1maws_iam_policy.lambda_logging: Creating...[0m[0m
[0m[1maws_cloudwatch_log_group.lambda_invocation_records: Creating...[0m[0m
[0m[1maws_iam_role.iam_for_lambda: Creating...[0m[0m
[0m[1maws_s3_bucket.cocorico_bucket: Creating...[0m[0m
[0m[1maws_cloudwatch_log_group.lambda_invocation_records: Creation complete after 1s [id=/aws/lambda/cocorico_function][0m
[0m[1maws_cloudwatch_log_group.cocorico_cwlg: Creation complete after 1s [id=cocorico_cwlg][0m
[0m[1mdata.aws_iam_policy_document.CloudTrail_CloudWatchLogs_Role_Policy: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.CloudTrail_CloudWatchLogs_Role_Policy: Read complete after 0s [id=1948509585][0m
[0m[1maws_iam_policy.cloudtrail-policy: Creating...[0m[0m
[0m[1maws_iam_role.iam_for_lambda: Creation complete after 3s [id=iam_for_lambda][0m
[0m[1maws_iam_policy.lambda_logging: Creation complete after 3s [id=arn:aws:iam::730335421882:policy/cocorico/lambda_logging][0m
[0m[1maws_iam_role_policy_attachment.lambda_logs: Creating...[0m[0m
[0m[1maws_iam_role.CloudTrail_CloudWatchLogs_Role: Creation complete after 3s [id=CloudTrail_CloudWatchLogs_Role][0m
[0m[1maws_iam_policy.cloudtrail-policy: Creation complete after 1s [id=arn:aws:iam::730335421882:policy/cocorico-cloudtrail-policy][0m
[0m[1maws_iam_role_policy_attachment.test-attach: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.lambda_logs: Creation complete after 0s [id=iam_for_lambda-20250216135239150200000002][0m
[0m[1maws_lambda_function.logging: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.test-attach: Creation complete after 1s [id=CloudTrail_CloudWatchLogs_Role-20250216135239544300000003][0m
[0m[1maws_s3_bucket.cocorico_bucket: Creation complete after 5s [id=cocorico-trails-20250216135236211400000001][0m
[0m[1mdata.aws_iam_policy_document.cocorico_iam_policy_document: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.cocorico_iam_policy_document: Read complete after 0s [id=1410703623][0m
[0m[1maws_s3_bucket_policy.cocorico_bucket_policy: Creating...[0m[0m
[0m[1maws_s3_bucket_policy.cocorico_bucket_policy: Creation complete after 1s [id=cocorico-trails-20250216135236211400000001][0m
[0m[1maws_cloudtrail.cocorico_trail: Creating...[0m[0m
[0m[1maws_cloudtrail.cocorico_trail: Creation complete after 5s [id=arn:aws:cloudtrail:af-south-1:730335421882:trail/cocorico_trail][0m
[0m[1maws_lambda_function.logging: Still creating... [10s elapsed][0m[0m
[0m[1maws_lambda_function.logging: Creation complete after 11s [id=cocorico_function][0m
[0m[1maws_lambda_permission.logging: Creating...[0m[0m
[0m[1maws_lambda_permission.logging: Creation complete after 0s [id=terraform-20250216135250786300000004][0m
[0m[1maws_cloudwatch_log_subscription_filter.logging: Creating...[0m[0m
[0m[1maws_cloudwatch_log_subscription_filter.logging: Creation complete after 1s [id=cwlsf-1317946781][0m
[0m[1m[32m
Apply complete! Resources: 14 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mcocorico_trail_id = "arn:aws:cloudtrail:af-south-1:730335421882:trail/cocorico_trail"
